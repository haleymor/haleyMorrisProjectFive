{"version":3,"sources":["firebase.js","components/Form.js","components/Entries.js","components/Header.js","components/Footer.js","components/Entry.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","handleTitleChange","e","setState","userInputTitle","target","value","handleLocationChange","userInputLocation","handleTextChange","userInputText","handlePhotoChange","userInputPhoto","handleDateChange","userInputDate","handleFormSubmit","preventDefault","entries","database","ref","entryObj","date","state","title","location","text","photo","push","props","showList","className","action","onSubmit","this","htmlFor","type","id","onChange","rows","cols","Component","Entries","handleClick","handleEntryClick","journalData","on","response","dataFromEntries","val","stateToBeSet","key","data","name","map","entry","onClick","Header","handleIconClick","iconClicked","icon","faHome","faPlusSquare","Footer","Entry","handleFilter","selectedEntry","filter","soloEntry","entryId","App","showForm","buttonClicked","buttonVisible","showEntry","singleEntry","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f0a0d01.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDLXlrLwrYxILVuveCZoloMRwVD-X4qPEI\",\n  authDomain: \"travel-journal-app-592bf.firebaseapp.com\",\n  databaseURL: \"https://travel-journal-app-592bf.firebaseio.com\",\n  projectId: \"travel-journal-app-592bf\",\n  storageBucket: \"travel-journal-app-592bf.appspot.com\",\n  messagingSenderId: \"487084831222\",\n  appId: \"1:487084831222:web:8a3ed52500c440eda197d7\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from '.././firebase';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n\n      userInputDate: '',\n      userInputTitle: '',\n      userInputLocation: '',\n      userInputText: '',\n      userInputPhoto: '',\n    }\n  }\n\n  handleTitleChange = (e) => {\n    this.setState({\n      userInputTitle: e.target.value,\n    })\n  }\n\n  handleLocationChange = (e) => {\n    this.setState({\n      userInputLocation: e.target.value,\n    })\n  }\n\n  handleTextChange = (e) => {\n    this.setState({\n      userInputText: e.target.value,\n    })\n  }\n\n  handlePhotoChange = (e) => {\n    this.setState({\n      userInputPhoto: e.target.value,\n    })\n  }\n\n  handleDateChange = (e) => {\n    this.setState({\n      userInputDate: e.target.value,\n    })\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    const entries = firebase.database().ref('entries');\n    const entryObj = {\n      date: this.state.userInputDate,\n      title: this.state.userInputTitle,\n      location: this.state.userInputLocation,\n      text: this.state.userInputText,\n      photo: this.state.userInputPhoto,\n    }\n\n    entries.push(entryObj);\n\n    this.setState({\n      userInputDate: '',\n      userInputTitle: '',\n      userInputLocation: '',\n      userInputText: '',\n      userInputPhoto: '',\n    })\n\n    this.props.showList();\n  }\n\n  render() {\n    return(\n      <section className=\"formSection\">\n        <h1>New Entry...</h1>\n        <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n          <div className=\"dateOfTrip input\">\n            <label htmlFor=\"date\">Date of Trip:</label>\n            <input type=\"date\" id=\"date\" onChange={this.handleDateChange} value={this.state.userInputDate} />\n          </div>\n          <div className=\"entryTitle input\">\n            <label htmlFor=\"title\">Entry Title:</label>\n            <input type=\"text\" id=\"title\" onChange={this.handleTitleChange} value={this.state.userInputTitle} />\n          </div>\n          <div className=\"locationOfTrip input\">\n            <label htmlFor=\"location\">Location of Trip:</label>\n            <input type=\"text\" id=\"location\" onChange={this.handleLocationChange} value={this.state.userInputLocation} />\n          </div>\n          <div className=\"entryText input\">\n            <label htmlFor=\"text\">Entry Text:</label>\n            <textarea id=\"text\" rows=\"20\" cols=\"45\" onChange={this.handleTextChange} value={this.state.userInputText}>\n            </textarea>\n          </div>\n          {/* wasn't able to get photos working but left it commented out because I want to continue to work on this functionality */}\n          {/* <div className=\"addPhoto input\">\n            <label htmlFor=\"photo\">Add Photo:</label>\n            <input type=\"file\" id=\"photo\" accept=\"image/png, image/jpeg\" onChange={this.handlePhotoChange} value={this.state.userInputPhoto} />\n          </div> */}\n          <div className=\"submitButton\">\n            <button type=\"submit\">Publish Entry</button>\n          </div>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport firebase from '.././firebase';\n\nclass Entries extends Component {\n  constructor(){\n    super();\n    this.state = {\n      journalData: [],\n    }\n  }\n\n  componentDidMount() {\n    const data = firebase.database().ref('entries');\n\n    data.on('value', (response) => {\n      const dataFromEntries = response.val();\n\n      const  stateToBeSet= [];\n\n      for (let key in dataFromEntries) {\n        const data = {\n          key: key,\n          name: dataFromEntries[key],\n        }\n        stateToBeSet.push(data);\n      }\n\n      this.setState({\n        journalData: stateToBeSet,\n      })\n    })\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.props.handleEntryClick(e.target.value);\n  }\n\n  render() {\n    return(\n      <section className=\"myEntries wrapper\">\n        <h1>My Entries</h1>\n          <ul>\n            {this.state.journalData.map((entry) => {\n              return (\n                <li key={entry.key}>\n                  <button onClick={this.handleClick} value={entry.key}>\n                    <h4>{entry.name.date}</h4>\n                    <p>{entry.name.title}</p>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n      </section>\n    );\n  }\n}\n\nexport default Entries;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n// import Form from './Form';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      iconClicked: false,\n    }\n  }\n\n  handleIconClick = () => {\n    this.setState({\n      iconClicked: true,\n    })\n  }\n  render() {\n    return(\n      <div className=\"appHeader\">\n        {/* left this commented out because not working properly but would like to remind myself how I was going to implement icon functionality */}\n        {/* {this.state.iconClicked \n          ? <Form /> \n          :  */}\n            <nav className=\"navMenu wrapper\">\n              <p>TRVL JRNL</p>\n              <ul>\n                <li>\n                  <FontAwesomeIcon icon={faHome} />\n                </li>\n                <li>\n                  <FontAwesomeIcon icon={faPlusSquare} onClick={this.handleIconClick} />\n                </li>\n              </ul>\n            </nav>\n          }\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"appFooter\">\n        <p>&copy; Haley Morris 2020</p>\n      </div>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from '.././firebase';\n\nclass Entry extends Component {\n  constructor() {\n    super();\n    this.state = {\n      journalData: []\n    }\n  }\n\n  handleFilter = () => {\n    const selectedEntry = this.state.journalData.filter((soloEntry) => {\n      if (soloEntry.key === this.props.entryId) {\n        return true\n      } else {\n        return false\n      }\n    })\n    this.setState({\n      journalData: selectedEntry\n    })\n  }\n\n  componentDidMount() {\n    const data = firebase.database().ref('entries');\n\n    data.on('value', (response) => {\n      const dataFromEntries = response.val();\n\n      const stateToBeSet = [];\n\n      for (let key in dataFromEntries) {\n        const data = {\n          key: key,\n          name: dataFromEntries[key],\n        }\n        stateToBeSet.push(data);\n      }\n\n      this.setState({\n        journalData: stateToBeSet,\n      }, () => {\n        this.handleFilter();\n      })\n    })\n\n  }\n\n  render() {\n    return (\n      <section className=\"singleEntry wrapper\">\n        {this.state.journalData.map((entry) => {\n          return (\n            <div className=\"entryContainer\">\n              <h5>{entry.name.title}</h5>\n              <h6>{entry.name.date}</h6>\n              <h6>{entry.name.location}</h6>\n              <p>{entry.name.text}</p>\n              {/* to add in later */}\n              {/* <img src={entry.name.photo} alt=\"\" /> */}\n            </div>\n          );\n        })}\n      </section>\n    );\n  }\n}\n\nexport default Entry;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Entries from './components/Entries';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Entry from './components/Entry';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      buttonClicked: false,\n      showList: false,\n      buttonVisible: true,\n      showEntry: false,\n      journalData: [],\n      singleEntry: '',\n    }\n  }\n\n  showForm = (e) => {\n    e.preventDefault();\n    this.setState({\n      buttonClicked: true,\n      buttonVisible: false,\n    })\n  }\n  \n  showList = () => {\n    this.setState({ \n      showList: true \n    })\n  }\n\n  handleEntryClick = (entryId) => {\n    this.setState({\n      showList: false,\n      showEntry: true,\n      singleEntry: entryId,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"landingPage\">\n          {this.state.buttonVisible &&\n            <div>\n              <h1>Travel Journal</h1>\n              <h2>Explore, Discover, Adventure, Journal.</h2>\n              <h3>Start documenting your travels today</h3>\n              <button onClick={this.showForm}>Create A Journal</button>\n            </div>\n            }\n          {this.state.buttonClicked && <Form showList={this.showList} />}\n          \n        </div>\n        { \n          this.state.showList ? <Entries handleEntryClick={this.handleEntryClick} />\n          :\n          this.state.showEntry && <Entry entryId={this.state.singleEntry} />\n        }\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}